From 466ead600360fd693ae92d7f52c36b3e780f5d9a Mon Sep 17 00:00:00 2001
From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
Date: Wed, 21 Jun 2017 12:18:04 +0300
Subject: [PATCH 1/2] Revert "xen/input: add multi-touch support"

This reverts commit 23445f9f6abfc057b4d59121c3c6e9d24c746a39.
---
 drivers/input/misc/xen-kbdfront.c | 142 +-------------------------------------
 1 file changed, 2 insertions(+), 140 deletions(-)

diff --git a/drivers/input/misc/xen-kbdfront.c b/drivers/input/misc/xen-kbdfront.c
index e5d064aaa237..01c27b4c3288 100644
--- a/drivers/input/misc/xen-kbdfront.c
+++ b/drivers/input/misc/xen-kbdfront.c
@@ -17,7 +17,6 @@
 #include <linux/errno.h>
 #include <linux/module.h>
 #include <linux/input.h>
-#include <linux/input/mt.h>
 #include <linux/slab.h>
 
 #include <asm/xen/hypervisor.h>
@@ -35,14 +34,11 @@
 struct xenkbd_info {
 	struct input_dev *kbd;
 	struct input_dev *ptr;
-	struct input_dev *mtouch;
 	struct xenkbd_page *page;
 	int gref;
 	int irq;
 	struct xenbus_device *xbdev;
 	char phys[32];
-	/* current MT slot/contact ID we are injecting events in */
-	int mtouch_cur_contact_id;
 };
 
 enum { KPARAM_X, KPARAM_Y, KPARAM_CNT };
@@ -51,12 +47,6 @@ module_param_array(ptr_size, int, NULL, 0444);
 MODULE_PARM_DESC(ptr_size,
 	"Pointing device width, height in pixels (default 800,600)");
 
-enum { KPARAM_MT_X, KPARAM_MT_Y, KPARAM_MT_CNT };
-static int mtouch_size[KPARAM_MT_CNT] = { XENFB_WIDTH, XENFB_HEIGHT };
-module_param_array(mtouch_size, int, NULL, 0444);
-MODULE_PARM_DESC(ptr_size,
-	"Multi-touch device width, height in pixels (default 800,600)");
-
 static int xenkbd_remove(struct xenbus_device *);
 static int xenkbd_connect_backend(struct xenbus_device *, struct xenkbd_info *);
 static void xenkbd_disconnect_backend(struct xenkbd_info *);
@@ -110,60 +100,6 @@ static irqreturn_t input_handler(int rq, void *dev_id)
 				input_report_rel(dev, REL_WHEEL,
 						 -event->pos.rel_z);
 			break;
-		case XENKBD_TYPE_MTOUCH:
-			dev = info->mtouch;
-			if (unlikely(!dev))
-				break;
-			if (unlikely(event->mtouch.contact_id !=
-					info->mtouch_cur_contact_id)) {
-				info->mtouch_cur_contact_id =
-					event->mtouch.contact_id;
-				input_mt_slot(dev, event->mtouch.contact_id);
-			}
-			switch (event->mtouch.event_type) {
-			case XENKBD_MT_EV_DOWN:
-				input_mt_report_slot_state(dev, MT_TOOL_FINGER,
-							   true);
-				input_event(dev, EV_ABS, ABS_MT_POSITION_X,
-					    event->mtouch.u.pos.abs_x);
-				input_event(dev, EV_ABS, ABS_MT_POSITION_Y,
-					    event->mtouch.u.pos.abs_y);
-				input_event(dev, EV_ABS, ABS_X,
-					    event->mtouch.u.pos.abs_x);
-				input_event(dev, EV_ABS, ABS_Y,
-					    event->mtouch.u.pos.abs_y);
-				break;
-			case XENKBD_MT_EV_UP:
-				input_mt_report_slot_state(dev, MT_TOOL_FINGER,
-							   false);
-				break;
-			case XENKBD_MT_EV_MOTION:
-				input_event(dev, EV_ABS, ABS_MT_POSITION_X,
-					    event->mtouch.u.pos.abs_x);
-				input_event(dev, EV_ABS, ABS_MT_POSITION_Y,
-					    event->mtouch.u.pos.abs_y);
-				input_event(dev, EV_ABS, ABS_X,
-					    event->mtouch.u.pos.abs_x);
-				input_event(dev, EV_ABS, ABS_Y,
-					    event->mtouch.u.pos.abs_y);
-				break;
-			case XENKBD_MT_EV_SYN:
-				input_mt_sync_frame(dev);
-				break;
-			case XENKBD_MT_EV_SHAPE:
-				input_event(dev, EV_ABS, ABS_MT_TOUCH_MAJOR,
-					    event->mtouch.u.shape.major);
-				input_event(dev, EV_ABS, ABS_MT_TOUCH_MINOR,
-					    event->mtouch.u.shape.minor);
-				break;
-			case XENKBD_MT_EV_ORIENT:
-				input_event(dev, EV_ABS, ABS_MT_ORIENTATION,
-					    event->mtouch.u.orientation);
-				break;
-			}
-			/* only report syn when requested */
-			if (event->mtouch.event_type != XENKBD_MT_EV_SYN)
-				dev = NULL;
 		}
 		if (dev)
 			input_sync(dev);
@@ -179,9 +115,9 @@ static int xenkbd_probe(struct xenbus_device *dev,
 				  const struct xenbus_device_id *id)
 {
 	int ret, i;
-	unsigned int abs, touch;
+	unsigned int abs;
 	struct xenkbd_info *info;
-	struct input_dev *kbd, *ptr, *mtouch;
+	struct input_dev *kbd, *ptr;
 
 	info = kzalloc(sizeof(*info), GFP_KERNEL);
 	if (!info) {
@@ -216,17 +152,6 @@ static int xenkbd_probe(struct xenbus_device *dev,
 		}
 	}
 
-	touch = xenbus_read_unsigned(dev->nodename,
-				     XENKBD_FIELD_FEAT_MTOUCH, 0);
-	if (touch) {
-		ret = xenbus_write(XBT_NIL, dev->nodename,
-				   XENKBD_FIELD_REQ_MTOUCH, "1");
-		if (ret) {
-			pr_warning("xenkbd: can't request multi-touch");
-			touch = 0;
-		}
-	}
-
 	/* keyboard */
 	kbd = input_allocate_device();
 	if (!kbd)
@@ -283,67 +208,6 @@ static int xenkbd_probe(struct xenbus_device *dev,
 	}
 	info->ptr = ptr;
 
-	/* multi-touch device */
-	if (touch) {
-		int num_cont, width, height;
-
-		mtouch = input_allocate_device();
-		if (!mtouch)
-			goto error_nomem;
-
-		num_cont = xenbus_read_unsigned(info->xbdev->nodename,
-						XENKBD_FIELD_MT_NUM_CONTACTS,
-						1);
-		width = xenbus_read_unsigned(info->xbdev->nodename,
-					     XENKBD_FIELD_MT_WIDTH,
-					     XENFB_WIDTH);
-		height = xenbus_read_unsigned(info->xbdev->nodename,
-					      XENKBD_FIELD_MT_HEIGHT,
-					      XENFB_HEIGHT);
-
-		mtouch->name = "Xen Virtual Multi-touch";
-		mtouch->phys = info->phys;
-		mtouch->id.bustype = BUS_PCI;
-		mtouch->id.vendor = 0x5853;
-		mtouch->id.product = 0xfffd;
-
-		__set_bit(EV_ABS, mtouch->evbit);
-		__set_bit(EV_KEY, mtouch->evbit);
-		__set_bit(BTN_TOUCH, mtouch->keybit);
-
-		input_set_abs_params(mtouch, ABS_X,
-				     0, width, 0, 0);
-		input_set_abs_params(mtouch, ABS_Y,
-				     0, height, 0, 0);
-		input_set_abs_params(mtouch, ABS_PRESSURE,
-				     0, 255, 0, 0);
-
-		input_set_abs_params(mtouch, ABS_MT_TOUCH_MAJOR,
-				     0, 255, 0, 0);
-		input_set_abs_params(mtouch, ABS_MT_POSITION_X,
-				     0, width, 0, 0);
-		input_set_abs_params(mtouch, ABS_MT_POSITION_Y,
-				     0, height, 0, 0);
-		input_set_abs_params(mtouch, ABS_MT_PRESSURE,
-				     0, 255, 0, 0);
-
-		input_mt_init_slots(mtouch, num_cont, 0);
-
-		mtouch_size[KPARAM_MT_X] = width;
-		mtouch_size[KPARAM_MT_Y] = height;
-		info->mtouch_cur_contact_id = -1;
-
-		ret = input_register_device(mtouch);
-		if (ret) {
-			input_free_device(mtouch);
-			xenbus_dev_fatal(info->xbdev, ret,
-					 "input_register_device(mtouch)");
-			goto error;
-		}
-		info->mtouch_cur_contact_id = -1;
-		info->mtouch = mtouch;
-	}
-
 	ret = xenkbd_connect_backend(dev, info);
 	if (ret < 0)
 		goto error;
@@ -376,8 +240,6 @@ static int xenkbd_remove(struct xenbus_device *dev)
 		input_unregister_device(info->kbd);
 	if (info->ptr)
 		input_unregister_device(info->ptr);
-	if (info->mtouch)
-		input_unregister_device(info->mtouch);
 	free_page((unsigned long)info->page);
 	kfree(info);
 	return 0;
-- 
2.7.4

